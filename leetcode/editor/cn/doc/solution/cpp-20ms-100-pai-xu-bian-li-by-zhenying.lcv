### 解题思路

1. 找到每个水龙头可以灌溉的左右位置
2. 对左位置排序
3. 排序之后，一次遍历
4. 初始时，在所有小于等于0的左边界的水龙头中找到右边界最大的位置
5. 后续将本次的哨兵位置更新为上次的有边界最大位置，在左边界小于哨兵位置的所有水龙头中找到有边界最大的位置
6. 一直遍历的过程中更新最大有边界即可

### 代码

* cpp

```cpp
class Solution {
public:
    int minTaps(int n, vector<int>& ranges) {
        vector<pair<int, int>> rv;
        for (int i = 0; i < ranges.size(); i++) {
            rv.push_back({i - ranges[i], i + ranges[i]});
        }
        sort(rv.begin(), rv.end());
        if (rv[0].first > 0) return -1;
        
        int pre = 0;
        int ind = 0;
        int res = 0;
        int right = -1;
        while (ind < rv.size()) {
            res++;
            right = pre;
            while (ind < rv.size() && rv[ind].first <= pre) {
                right = max(right, rv[ind].second);
                ind++;
            }
            if (ind >= rv.size()) break;
            if (right == pre) return -1;
            if (right >= n) return res;
            pre = right;
        }
        
        if (right < n) return -1;
        
        return res;
    }
};
```

