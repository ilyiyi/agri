# 前言

- 本题考虑到数据规模我们需要考虑$O(n^2)$以下的算法
- 我们可以从贪心的角度考虑到添加每一个学生需要添加到“增益”最大的班级中
- 定义：增益 $\frac{pass+1}{\text { total }+1}-\frac{p a s s}{\text { total }}$
- 考虑使用一个数据结构去帮助我们获得当前队列中增益最大的班级，然后添加一个学生到该班级，再把这个新的班级重新加入这个数据结构中
- 我们使用优先队列帮助我们实现$O((n+m)\log n)$的算法
- 使用`C++`的同学需要注意不要使用$vector$作为数据结构存储到优先队列中

# 方法一：优先队列

* []

```C++
class Solution {
public:
    struct Class {
        int passes;
        int students;
        
        Class(int p, int s) : passes(p), students(s) {}
        
        double ratio() const {
            return static_cast<double>(passes) / students;
        }
        
        bool operator<(const Class& other) const {
            return (static_cast<double>(passes + 1) / (students + 1) - ratio()) < (static_cast<double>(other.passes + 1) / (other.students + 1) - other.ratio());
        }
    };
    
    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {
        const int n = classes.size();

        priority_queue<Class> pq;
        for (int i = 0; i < n; i++) {
            pq.push(Class(classes[i][0], classes[i][1]));
        }
        
        while (extraStudents > 0) {
            Class c = pq.top();
            pq.pop();
            c.passes++;
            c.students++;
            pq.push(c);
            extraStudents--;
        }
        
        double ans = 0.0;
        while (!pq.empty()) {
            ans += pq.top().ratio();
            pq.pop();
        }
        return ans / n;
    }
};

```

* []

```Java
class Solution {
    private static class Class implements Comparable<Class> {
        private int passes;
        private int students;
        
        public Class(int passes, int students) {
            this.passes = passes;
            this.students = students;
        }
        
        public double ratio() {
            return (double) passes / students;
        }
        
        @Override
        public int compareTo(Class other) {
            double diff = (passes + 1.0) / (students + 1.0) - ratio() - (other.passes + 1.0) / (other.students + 1.0) + other.ratio();
            if (diff < 0) {
                return 1;
            } else if (diff > 0) {
                return -1;
            } else {
                return 0;
            }
        }
    }
    
    public double maxAverageRatio(int[][] classes, int extraStudents) {
        int n = classes.length;

        PriorityQueue<Class> pq = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            pq.offer(new Class(classes[i][0], classes[i][1]));
        }
        
        while (extraStudents > 0) {
            Class c = pq.poll();
            c.passes++;
            c.students++;
            pq.offer(c);
            extraStudents--;
        }
        
        double ans = 0.0;
        while (!pq.isEmpty()) {
            ans += pq.poll().ratio();
        }
        return ans / n;
    }
}
```

# 复杂度

- 时间复杂度： $O((n+m)\log n)$
- 空间复杂度： $O(n)$

